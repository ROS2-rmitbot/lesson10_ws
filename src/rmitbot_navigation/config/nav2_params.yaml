# ========================================================
# BT: Behaviour Tree - decision-making brain of Nav2
# ========================================================
bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# ========================================================
# controller_server:= trajectory follower
# ========================================================
controller_server:
  ros__parameters:
    controller_frequency: 30. #20.
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.02
    min_y_velocity_threshold: 0.02
    min_theta_velocity_threshold: 0.05
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      # plugin: "nav2_controller::SimpleProgressChecker"
      plugin: "nav2_controller::PoseProgressChecker"
      required_movement_radius: 0.10
      required_movement_angle: 0.5
      movement_time_allowance: 12.0

    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.2 #0.2
      yaw_goal_tolerance: 0.2 #0.25

    # DWB CONTROLLER
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: -0.4
      min_vel_y: -0.4
      max_vel_x: 0.4
      max_vel_y: 0.4
      max_vel_theta: 1.2
      min_speed_xy: -0.4
      max_speed_xy: 0.4
      min_speed_theta: 0. #-1.2
      acc_lim_x: 2.0
      acc_lim_y: 2.0
      acc_lim_theta: 3.0
      decel_lim_x: -2.0
      decel_lim_y: -2.0
      decel_lim_theta: -3.0
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 5
      sim_time: 1.
      linear_granularity: 0.2
      angular_granularity: 0.5
      transform_tolerance: 0.7
      xy_goal_tolerance: 0.1
      trans_stopped_velocity: 0.1
      short_circuit_trajectory_evaluation: True
      limit_vel_cmd_in_traj: False
      stateful: True
      critics: ["BaseObstacle", "GoalAlign", "GoalDist", "Oscillation", "PathAlign", "PathDist", "PreferForward", "RotateToGoal", "Twirling"]
      
      BaseObstacle:
        scale: 0.5
      GoalAlign:
        scale: 0. #24.0
        forward_point_distance: 1.
      GoalDist:
        scale: .5 #24.0
      Oscillation:
        scale: 0.
      PathAlign: 
        scale: 0.
        forward_point_distance: 1.
      PathDist:
        scale: 0.5 #32.0
      PreferForward:
        scale: 0.
      RotateToGoal:
        scale: 5. #32.0
        slowing_factor: 3.0
        lookahead_time: 5.0
        xy_goal_tolerance: 0.2 #0.2
      Twirling: 
        scale: 0.0

# ========================================================
# Eye of the navigation
# ========================================================
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.18
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        enabled: true
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0
        inflation_radius: 0.2
      obstacle_layer:
        enabled: true
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
        qos_overrides:
          /scan:
            subscription:
              history: keep_last
              depth: 1
              reliability: best_effort
      always_send_full_costmap: True

#=====================================================
# Global Costmap: global map for global path planning
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      robot_radius: 0.18
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
        qos_overrides:
          /scan:
            subscription:
              history: keep_last
              depth: 1
              reliability: best_effort
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.4
      always_send_full_costmap: True

#=====================================================
# Map Saver: to save the map
map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

#=====================================================
# Global Planner: to plan the global path
planner_server:
  ros__parameters:
    expected_planner_frequency: 5.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner::SmacPlannerHybrid"
      angle_quantization_bins: 64
      minimum_turning_radius: 0.0     # holonomic (mecanum)
      retrospective_penalty: 0.0
      smooth_path: true
      downsample_costmap: false
      goal_heading_mode: "BIDIRECTIONAL"
      reverse_penalty: 1.0
      change_penalty: 1.0
      non_straight_penalty: 1.0

#=====================================================
# Smoother Server: to smooth the global path
smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 500
      do_refinement: True


#=====================================================
# Behaviour Server: to handle robot recovery behaviors
behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    # behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    behavior_plugins: ["spin", "backup", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.7
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

#=====================================================
# Waypoint Follower: to follow a series of waypoints
waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

#=====================================================
# Velocity Smoother: to smooth the velocity commands 
velocity_smoother:
  ros__parameters:
    smoothing_frequency: 30.0
    scale_velocities: False
    feedback: "CLOSED_LOOP"
    max_velocity: [200.5, 200.5, 400.0]
    min_velocity: [-200.5, -200.5, -400.0]
    max_accel: [5.5, 5.5, 8.2]
    max_decel: [-5.5, -5.5, -8.2]

    odom_topic: "/odometry/filtered"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

#=====================================================
# Collision Monitor: to monitor potential collisions
collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.7
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      # enabled: True
      enabled: False
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True
    qos_overrides:
      /scan:
        subscription:
          history: keep_last
          depth: 1
          reliability: best_effort

#=====================================================
# Docking Server: to autonomously dock with a charging station
docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_footprint"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15
      use_collision_detection: true
      costmap_topic: "local_costmap/costmap_raw"
      footprint_topic: "local_costmap/published_footprint"
      transform_tolerance: 0.7
      projection_time: 5.0
      simulation_step: 0.1
      dock_collision_threshold: 0.3

